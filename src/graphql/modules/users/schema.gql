type User {
  id: ID!
  name: String!
  phone: String!
  username: String!
  password: String!
  lastAccess: String
  autoPayment: Boolean
  address: Address!
  favorites: [Snack!]!
  orders: [Order!]!
  creditCards: [CreditCard!]!
  createdAt: String!
  updatedAt: String!
}

type CreditCard {
  id: ID!
  number: String!
  nameOwer: String!
  validateDate: String!
  securityCode: String!
  user: User!
  createdAt: String!
  updatedAt: String!
}

type Query {
  users: [User!]!
  user(id: ID!): User
}

input UserInput {
  name: String!
  phone: String!
  username: String!
  password: String!
  autoPayment: Boolean
  address: AddressInput!
}

type Mutation {
  createUser(
    name: String!
    phone: String!
    username: String!
    password: String!
    autoPayment: Boolean
    address: AddressInput!
  ): User
  updateUser(
    name: String!
    phone: String!
    username: String!
    autoPayment: Boolean
    address: AddressInput!
  ): User
  addFavorite(snack_id: ID!): Boolean!
  removeFavorite(snack_id: ID!): Boolean!
  addCreditCart(
    number: String!
    nameOwner: String!
    validateDate: String!
    securityCode: String!
  ): CreditCard
  removeCreditCard(id: ID!): Boolean!
  login(username: String!, password: String!): AuthPayload
}

type AuthPayload {
  token: String!
  user: User!
}
